# -*- coding: utf-8 -*-
"""Test Gemini LLM with LangChain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17fVZZmQdGESIkDI2is1sWTYndpZ1v9Bp
"""

# Install required libraries
!pip install langchain langchain-google-genai pandas python-dotenv datasets

# Import libraries
import os
from dotenv import load_dotenv
from langchain_google_genai import ChatGoogleGenerativeAI

# Load KPI Key
load_dotenv("/content/API KEY.env")

# Get API Key
api_key = os.getenv("GOOGLE_API_KEY")

# Initialize Gemini LLM
#LLM = ChatGoogleGenerativeAI(model="gemini-2.5-pro")
LLM = ChatGoogleGenerativeAI(model="gemini-2.5-flash")

# Import libraries
from datasets import load_dataset
import pandas as pd

! pip install -U datasets huggingface_hub fsspec

# Load AIME 2024 dataset from Hugging Face
dataset = load_dataset("Maxwell-Jia/AIME_2024")

# Convert dataset to DataFrame and select the first 5 questions
df = pd.DataFrame(dataset['train'])
test_data = df[['ID', 'Problem', 'Solution', 'Answer']].head(3)  # Changed to 3 question to save quota

# Display the first 5 rows of the dataset
print(df.head())

# Import libraries
from langchain.prompts import PromptTemplate
import re

# Create a Prompt Template for math problems
prompt_template = PromptTemplate(
    input_variables=["question"],
    template="Please solve this math problem step-by-step and return the final answer as a number:\n{question}\n"
)

# Function to extract final answer as a number from model response
def extract_number(text):
    match = re.search(r'\b\d+\b', text)
    return match.group() if match else text

results = []
for index, row in test_data.iterrows():
    prompt = prompt_template.format(question=row['Problem'])
    response = LLM.invoke(prompt)
    generated_answer = extract_number(response.content.strip())
    results.append({
        'id': row['ID'],
        'question': row['Problem'],
        'expected': row['Answer'],
        'generated': generated_answer,
        'is_exact_match': str(row['Answer']) == generated_answer
    })

# Create a results table
results_table = pd.DataFrame(results)

# Display the results table
print(results_table)

# Calculate and display overall accuracy
accuracy = results_table['is_exact_match'].mean()
print(f"Overall Accuracy: {accuracy:.2f}")